<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java 中的 ==, equals 的区别</title>
      <link href="/2018/06/07/Java-%E4%B8%AD%E7%9A%84-equals-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/06/07/Java-%E4%B8%AD%E7%9A%84-equals-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="Java-中的-equals-的区别"><a href="#Java-中的-equals-的区别" class="headerlink" title="Java 中的 ==, equals 的区别"></a>Java 中的 ==, equals 的区别</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><pre><code>== ： 该操作符生成的是一个boolean结果，它计算的是操作数的值之间的关系equals : Object的实例方法，比较两个对象的content是否相同</code></pre><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符=="></a>关系操作符==</h3><p>基本数据类型变量</p><p>对于基本数据类型变量，变量直接存储的是“值”，使用关系操作符来进行比较时，比较的就是“值”本身</p><p> 引用类型变量<br>   在Java中，引用类型的变量存储的并不是“值”本身，而是与其指向的对象在内存中的地址（关于对象引用的内容，不了解请查看这篇博客：<a href="https://blog.csdn.net/lxl121181/article/details/80483657）" target="_blank" rel="noopener">https://blog.csdn.net/lxl121181/article/details/80483657）</a></p><p>所以关系操作符判断的是左右两边操作数的内存地址是否相同，若返回true，则该操作符作用的一定是同一个对象</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p> Java语言里的euqals方法其实是交给开发者去覆写的，让开发者自己去定义满足什么条件的两个Object是euqal的</p><p>所以我们不能单纯的说euqals到底比较的是什么。你想知道一个类的equals方法是什么意思就要去看定义</p><p>Object类中equals方法实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很显然，在Object类中，equals方法时用来比较两个对象的引用是否相等，即是否指向同一个对象</p><p>而String类则覆写了这个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;   </span><br><span class="line">    if (this == anObject) &#123;     // 1.先判断引用是否相同(是否为同一对象),</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;   //2. 再判断类型是否一致,</span><br><span class="line">        // 3.最后判断内容是否一致.</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = count;</span><br><span class="line">        if (n == anotherString.count) &#123;</span><br><span class="line">        char v1[] = value;</span><br><span class="line">        char v2[] = anotherString.value;</span><br><span class="line">        int i = offset;</span><br><span class="line">        int j = anotherString.offset;</span><br><span class="line">        while (n-- != 0) &#123;</span><br><span class="line">            if (v1[i++] != v2[j++])</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Java语言规范要求euqals方法具有下面的特性："><a href="#Java语言规范要求euqals方法具有下面的特性：" class="headerlink" title="Java语言规范要求euqals方法具有下面的特性："></a>Java语言规范要求euqals方法具有下面的特性：</h3><ul><li><p>对称性： 对于任何引用x和y，当且仅当x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true” ；</p></li><li><p>自反性： 对于任何非空引用x，x.equals(x)应该返回“true” ；</p></li><li><p>传递性： 对于任何引用x和y，如果x.equals(y)返回是“true”，y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true” ；</p></li><li><p>一致性： 如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果</p></li><li><p>对于任意非空引用x，x.equals(null)应该返回false。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> == </tag>
            
            <tag> equal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xiaolu</title>
      <link href="/2018/05/14/xiaolu/"/>
      <url>/2018/05/14/xiaolu/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
